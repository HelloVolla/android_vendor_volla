From 862722947b145f7cd7dd35ad98981f15ecbc63d0 Mon Sep 17 00:00:00 2001
From: Maanush Putcha <p.maanush@gmail.com>
Date: Tue, 24 Nov 2020 06:51:39 +0530
Subject: [PATCH] build: Add option to append vbmeta image to boot image

* Partially taken from https://github.com/mtk-watch/android_build_make/commit/89d279a7ab1d0249f89c84d53fd4dbd786d19727

* Set MAIN_VBMETA_IN_BOOT=yes for the vbmeta to get appended to boot image

Signed-off-by: Maanush Putcha <p.maanush@gmail.com>
Change-Id: Ie11338be0dc76605e38644cf7befb2483d816d6e
---
 core/Makefile                                 | 37 +++++++++++++++++--
 core/main.mk                                  |  4 +-
 tools/releasetools/add_img_to_target_files.py | 29 +++++++++++++++
 tools/releasetools/common.py                  | 27 +++++++-------
 4 files changed, 79 insertions(+), 18 deletions(-)

diff --git a/core/Makefile b/core/Makefile
index dbde1060df..51eb4039d4 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -1192,9 +1192,11 @@ endif # BUILDING_RAMDISK_IMAGE
 # This is defined here since we may be building recovery as boot
 # below and only want to define this once
 ifneq ($(strip $(BOARD_KERNEL_BINARIES)),)
-  BUILT_BOOTIMAGE_TARGET := $(foreach k,$(subst kernel,boot,$(BOARD_KERNEL_BINARIES)), $(PRODUCT_OUT)/$(k).img)
+  BUILT_BOOTIMAGE_TARGET := $(foreach k,$(subst kernel,boot,$(BOARD_KERNEL_BINARIES)), $(call intermediates-dir-for,PACKAGING,boot)/$(k).img)
+  MTK_BOOTIMAGE_TARGET := $(foreach k,$(subst kernel,boot,$(BOARD_KERNEL_BINARIES)), $(PRODUCT_OUT)/$(k).img)
 else
-  BUILT_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
+  BUILT_BOOTIMAGE_TARGET := $(call intermediates-dir-for,PACKAGING,boot)/boot.img
+  MTK_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
 endif
 
 ifdef BOARD_BOOTIMAGE_PARTITION_SIZE
@@ -1350,6 +1352,7 @@ INSTALLED_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
 $(eval $(call copy-one-file,$(BOARD_PREBUILT_BOOTIMAGE),$(INSTALLED_BOOTIMAGE_TARGET)))
 else # BOARD_PREBUILT_BOOTIMAGE not defined
 INSTALLED_BOOTIMAGE_TARGET :=
+MTK_BOOTIMAGE_TARGET :=
 endif # BOARD_PREBUILT_BOOTIMAGE
 endif # TARGET_NO_KERNEL
 
@@ -3485,11 +3488,13 @@ endif
 # details.
 ifeq ($(TARGET_OTA_ALLOW_NON_AB),true)
 ifneq ($(INSTALLED_RECOVERYIMAGE_TARGET),)
+ifneq ($(strip $(MAIN_VBMETA_IN_BOOT)),yes)
 $(if $(BOARD_AVB_RECOVERY_KEY_PATH),,\
     $(error BOARD_AVB_RECOVERY_KEY_PATH must be defined for if non-A/B is supported. \
             See https://android.googlesource.com/platform/external/avb/+/master/README.md#booting-into-recovery))
 endif
 endif
+endif
 
 # Appends os version and security patch level as a AVB property descriptor
 
@@ -3577,7 +3582,7 @@ $(eval $(_signing_args) := \
 
 # The recovery partition in non-A/B devices should be verified separately. Skip adding the chain
 # partition descriptor for recovery partition into vbmeta.img.
-$(if $(or $(filter-out true,$(TARGET_OTA_ALLOW_NON_AB)),$(filter-out recovery,$(part))),\
+$(if $(or $(filter yes,$(MAIN_VBMETA_IN_BOOT)),$(filter-out true,$(TARGET_OTA_ALLOW_NON_AB)),$(filter-out recovery,$(part))),\
     $(eval INTERNAL_AVB_MAKE_VBMETA_IMAGE_ARGS += \
         --chain_partition $(part):$($(_rollback_index_location)):$(AVB_CHAIN_KEY_DIR)/$(part).avbpubkey))
 
@@ -3829,6 +3834,23 @@ endif # BUILDING_VBMETA_IMAGE
 
 endif # BOARD_AVB_ENABLE
 
+ifneq ($(strip $(TARGET_NO_KERNEL)),true)
+ifeq (yes, $(strip $(MAIN_VBMETA_IN_BOOT)))
+
+ifeq (true, $(strip $(BOARD_AVB_ENABLE)))
+$(MTK_BOOTIMAGE_TARGET): $(INSTALLED_BOOTIMAGE_TARGET) $(BUILT_VBMETAIMAGE_TARGET) $(AVBTOOL)
+	@echo "Install boot image: $@"
+	$(copy-file-to-target)
+	$(hide) $(AVBTOOL) append_vbmeta_image --image $@ --partition_size $(BOARD_BOOTIMAGE_PARTITION_SIZE) --vbmeta_image $(BUILT_VBMETAIMAGE_TARGET)
+endif
+
+else
+$(MTK_BOOTIMAGE_TARGET): $(INSTALLED_BOOTIMAGE_TARGET)
+	@echo "Install boot image: $@"
+	$(copy-file-to-target)
+endif # MAIN_VBMETA_IN_BOOT
+endif # TARGET_NO_KERNEL
+
 # -----------------------------------------------------------------
 # Check VINTF of build
 
@@ -4387,6 +4409,9 @@ ifneq (,$(strip $(BOARD_CUSTOMIMAGES_PARTITION_LIST)))
 	    echo "avb_$(partition)_partition_size=$(BOARD_AVB_$(call to-upper,$(partition))_PARTITION_SIZE)"  >> $@; \
 	    echo "avb_$(partition)_image_list=$(foreach image,$(BOARD_AVB_$(call to-upper,$(partition))_IMAGE_LIST),$(notdir $(image)))" >> $@;)
 endif # BOARD_CUSTOMIMAGES_PARTITION_LIST
+ifeq (yes, $(strip $(MAIN_VBMETA_IN_BOOT)))
+	$(hide) echo "avb_main_vbmeta_in_boot=true" >> $@
+endif # MAIN_VBMETA_IN_BOOT
 ifneq (,$(strip $(BOARD_AVB_VBMETA_SYSTEM)))
 	$(hide) echo "avb_vbmeta_system=$(BOARD_AVB_VBMETA_SYSTEM)" >> $@
 	$(hide) echo "avb_vbmeta_system_args=$(BOARD_AVB_MAKE_VBMETA_SYSTEM_IMAGE_ARGS)" >> $@
@@ -4611,6 +4636,7 @@ endif
 # directories are up-to-date.
 $(BUILT_TARGET_FILES_PACKAGE): \
 	    $(INSTALLED_RAMDISK_TARGET) \
+	    $(MTK_BOOTIMAGE_TARGET) \
 	    $(INSTALLED_BOOTIMAGE_TARGET) \
 	    $(INSTALLED_VENDOR_BOOTIMAGE_TARGET) \
 	    $(INSTALLED_RADIOIMAGE_TARGET) \
@@ -4947,6 +4973,11 @@ endif
 ifeq ($(BUILD_QEMU_IMAGES),true)
 	$(hide) AVBTOOL=$(AVBTOOL) $(MK_VBMETA_BOOT_KERNEL_CMDLINE_SH) $(zip_root)/IMAGES/vbmeta.img \
 	    $(zip_root)/IMAGES/system.img $(zip_root)/IMAGES/VerifiedBootParams.textproto
+endif
+ifeq (yes, $(strip $(MAIN_VBMETA_IN_BOOT)))
+ifeq (true, $(strip $(BOARD_AVB_ENABLE)))
+	$(hide) $(AVBTOOL) append_vbmeta_image --image $(zip_root)/IMAGES/boot.img --partition_size $(BOARD_BOOTIMAGE_PARTITION_SIZE) --vbmeta_image $(zip_root)/IMAGES/vbmeta.img
+endif
 endif
 	@# Zip everything up, preserving symlinks and placing META/ files first to
 	@# help early validation of the .zip file while uploading it.
diff --git a/core/main.mk b/core/main.mk
index 5b39e8da41..5abaa982d8 100644
--- a/core/main.mk
+++ b/core/main.mk
@@ -1436,7 +1436,7 @@ systemotherimage: $(INSTALLED_SYSTEMOTHERIMAGE_TARGET)
 superimage_empty: $(INSTALLED_SUPERIMAGE_EMPTY_TARGET)
 
 .PHONY: bootimage
-bootimage: $(INSTALLED_BOOTIMAGE_TARGET)
+bootimage: $(MTK_BOOTIMAGE_TARGET)
 
 .PHONY: bootimage_debug
 bootimage_debug: $(INSTALLED_DEBUG_BOOTIMAGE_TARGET)
@@ -1455,7 +1455,7 @@ auxiliary: $(INSTALLED_AUX_TARGETS)
 droidcore: $(filter $(HOST_OUT_ROOT)/%,$(modules_to_install)) \
     $(INSTALLED_SYSTEMIMAGE_TARGET) \
     $(INSTALLED_RAMDISK_TARGET) \
-    $(INSTALLED_BOOTIMAGE_TARGET) \
+    $(MTK_BOOTIMAGE_TARGET) \
     $(INSTALLED_RADIOIMAGE_TARGET) \
     $(INSTALLED_DEBUG_RAMDISK_TARGET) \
     $(INSTALLED_DEBUG_BOOTIMAGE_TARGET) \
diff --git a/tools/releasetools/add_img_to_target_files.py b/tools/releasetools/add_img_to_target_files.py
index f58b6978a8..e2fa5fdcfb 100644
--- a/tools/releasetools/add_img_to_target_files.py
+++ b/tools/releasetools/add_img_to_target_files.py
@@ -452,6 +452,31 @@ def AddUserdata(output_zip):
   common.CheckSize(img.name, "userdata.img", OPTIONS.info_dict)
   img.Write()
 
+def AVBSignBoot(output_zip):
+  """Sign the boot image by avbtool.
+  Skip sign the boot image in GetBootableImage for generate recovery
+  patch if main_vbmeta_in_boot is enabled. Sign boot image which is
+  under IMAGES/ and is generated by GetBootableImage.
+  """
+  img = OutputFile(output_zip, OPTIONS.input_tmp, "IMAGES", "boot.img")
+  if os.path.exists(img.name):
+  # AVB-sign the image as needed.
+    avbtool = os.getenv('AVBTOOL') or OPTIONS.info_dict["avb_avbtool"]
+    part_size = OPTIONS.info_dict["boot_size"]
+    # The AVB hash footer will be replaced if already present.
+    cmd = [avbtool, "add_hash_footer", "--image", img.name,
+           "--partition_size", str(part_size), "--partition_name", "boot"]
+    common.AppendAVBSigningArgs(cmd, "boot")
+    args = OPTIONS.info_dict.get("avb_boot_add_hash_footer_args")
+    if args and args.strip():
+      cmd.extend(shlex.split(args))
+    common.RunAndCheckOutput(cmd)
+  else:
+    assert os.path.exists(img.input_name), 'Failed to find boot.img in %s' % (
+        img.input_name)
+
+  img.Write()
+  return img.name
 
 def AddVBMeta(output_zip, partitions, name, needed_partitions):
   """Creates a VBMeta image and stores it in output_zip.
@@ -891,6 +916,10 @@ def AddImagesToTargetFiles(filename):
     banner("custom images for " + partition_name)
     partitions[partition_name] = AddCustomImages(output_zip, partition_name)
 
+  if OPTIONS.info_dict.get("avb_main_vbmeta_in_boot") == "true":
+    banner("main_vbmeta_in_boot")
+    partitions['boot'] = AVBSignBoot(output_zip)
+
   if OPTIONS.info_dict.get("avb_enable") == "true":
     # vbmeta_partitions includes the partitions that should be included into
     # top-level vbmeta.img, which are the ones that are not included in any
diff --git a/tools/releasetools/common.py b/tools/releasetools/common.py
index 76c2c97cb9..b51454482e 100644
--- a/tools/releasetools/common.py
+++ b/tools/releasetools/common.py
@@ -1325,19 +1325,20 @@ def _BuildBootableImage(image_name, sourcedir, fs_config_file, info_dict=None,
 
   # AVB: if enabled, calculate and add hash to boot.img or recovery.img.
   if info_dict.get("avb_enable") == "true":
-    avbtool = info_dict["avb_avbtool"]
-    if partition_name == "recovery":
-      part_size = info_dict["recovery_size"]
-    else:
-      part_size = info_dict[image_name.replace(".img","_size")]
-    cmd = [avbtool, "add_hash_footer", "--image", img.name,
-           "--partition_size", str(part_size), "--partition_name",
-           partition_name]
-    AppendAVBSigningArgs(cmd, partition_name)
-    args = info_dict.get("avb_" + partition_name + "_add_hash_footer_args")
-    if args and args.strip():
-      cmd.extend(shlex.split(args))
-    RunAndCheckOutput(cmd)
+    if partition_name != "boot" or info_dict.get("avb_main_vbmeta_in_boot") != "true":
+      avbtool = info_dict["avb_avbtool"]
+      if partition_name == "recovery":
+        part_size = info_dict["recovery_size"]
+      else:
+        part_size = info_dict[image_name.replace(".img","_size")]
+      cmd = [avbtool, "add_hash_footer", "--image", img.name,
+             "--partition_size", str(part_size), "--partition_name",
+             partition_name]
+      AppendAVBSigningArgs(cmd, partition_name)
+      args = info_dict.get("avb_" + partition_name + "_add_hash_footer_args")
+      if args and args.strip():
+        cmd.extend(shlex.split(args))
+      RunAndCheckOutput(cmd)
 
   img.seek(os.SEEK_SET, 0)
   data = img.read()
-- 
2.29.2

