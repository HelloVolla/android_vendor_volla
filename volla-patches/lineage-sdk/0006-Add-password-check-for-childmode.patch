From 3b715d87ba8c65f62e71eb0fed1db1a089d86827 Mon Sep 17 00:00:00 2001
From: Erfan Abdi <erfangplus@gmail.com>
Date: Sun, 27 Feb 2022 22:10:07 +0330
Subject: [PATCH] Add password check for childmode

Change-Id: Ib72f8ebc0984ca91e534fbb30ca098c90ef799b7
---
 api/lineage_current.txt                       |   3 +
 .../platform/internal/ChildModeService.java   | 118 ++++++++++++++++++
 .../lineageos/childmode/ChildModeManager.java |  24 ++++
 .../childmode/IChildModeService.aidl          |   6 +
 4 files changed, 151 insertions(+)

diff --git a/api/lineage_current.txt b/api/lineage_current.txt
index a48bca78..0ff48212 100644
--- a/api/lineage_current.txt
+++ b/api/lineage_current.txt
@@ -896,6 +896,9 @@ package lineageos.childmode {
     method public static lineageos.childmode.ChildModeManager getService();
     method public void activate(boolean);
     method public boolean isActivate();
+    method public boolean setPassword(java.lang.String);
+    method public boolean validatePassword(java.lang.String);
+    method public boolean isPasswortSet();
   }
 
 }
diff --git a/lineage/lib/main/java/org/lineageos/platform/internal/ChildModeService.java b/lineage/lib/main/java/org/lineageos/platform/internal/ChildModeService.java
index a5fcef7f..57af481b 100644
--- a/lineage/lib/main/java/org/lineageos/platform/internal/ChildModeService.java
+++ b/lineage/lib/main/java/org/lineageos/platform/internal/ChildModeService.java
@@ -16,9 +16,12 @@
 
 package org.lineageos.platform.internal;
 
+import android.app.ActivityManager;
 import android.content.Context;
+import android.os.Environment;
 import android.os.SystemProperties;
 import android.os.IBinder;
+import android.os.UserManager;
 import android.util.Slog;
 
 import lineageos.childmode.IChildModeService;
@@ -30,16 +33,40 @@ import com.android.internal.R;
 import com.android.server.LocalServices;
 import com.android.server.SystemService;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.StandardOpenOption;
+import java.security.KeyStore;
+import java.security.KeyStoreException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.UnrecoverableKeyException;
+import java.security.cert.CertificateException;
+import java.util.Arrays;
+
 public class ChildModeService extends LineageSystemService {
 
     private static final String TAG = "ChildModeService";
     private static final boolean DEBUG_CHILDMODE = true;
 
+    private int mUserId;
     private Context mContext;
+    private MessageDigest mDigest;
 
     public ChildModeService(Context context) {
         super(context);
         mContext = context;
+        mUserId = ActivityManager.getCurrentUser();
+        try {
+            mDigest = MessageDigest.getInstance("SHA-256");
+        } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
@@ -53,6 +80,40 @@ public class ChildModeService extends LineageSystemService {
         publishBinderService(LineageContextConstants.VOLLA_CHILDMODE_SERVICE, mService);
     }
 
+    @Override
+    public void onUnlockUser(int userHandle) {
+        if (DEBUG_CHILDMODE) Slog.v(TAG, "onUnlockUser() mUserId:" + userHandle);
+        if (!UserManager.get(mContext).isManagedProfile(userHandle)) {
+            if (DEBUG_CHILDMODE) Slog.v(TAG, "onUnlockUser() is NOT ManagedProfile");
+            mUserId = userHandle;
+        }
+    }
+
+    @Override
+    public void onSwitchUser(int userHandle) {
+        if (DEBUG_CHILDMODE) Slog.v(TAG, "onSwitchUser() mUserId:" + userHandle);
+        if (!UserManager.get(mContext).isManagedProfile(userHandle)) {
+            if (DEBUG_CHILDMODE) Slog.v(TAG, "onSwitchUser() is NOT ManagedProfile");
+            mUserId = userHandle;
+        }
+    }
+
+    @Override
+    public void onStopUser(int userHandle) {
+        if (DEBUG_CHILDMODE) Slog.v(TAG, "onStopUser() userHandle:" + userHandle);
+        if (mUserId == userHandle) {
+            mUserId = ActivityManager.getCurrentUser();
+        }
+    }
+
+    private File getDir() {
+        File dir = new File(Environment.getDataSystemCeDirectory(mUserId), "childmode");
+        if (!dir.exists() && !dir.mkdirs()) {
+            Slog.e(TAG, "Error while creating childmode directory: " + dir);
+        }
+        return dir;
+    }
+
     public void activate(boolean enable) {
         AppLockManager appLockManager = AppLockManager.getInstance(mContext);
         FirewallManager firewallManager = FirewallManager.getInstance(mContext);
@@ -67,6 +128,48 @@ public class ChildModeService extends LineageSystemService {
         return SystemProperties.getBoolean("persist.volla.childmode.enable", false);
     }
 
+    public boolean setPassword(String password) {
+        if (isActivate())
+            return false;
+
+        byte[] hash = mDigest.digest(password.getBytes(StandardCharsets.UTF_8));
+        try {
+            Files.write(Paths.get(getDir().getAbsolutePath() + "/.pass"),
+                    hash, StandardOpenOption.CREATE);
+        } catch (IOException e) {
+            e.printStackTrace();
+            return false;
+        }
+
+        return true;
+    }
+
+    public boolean validatePassword(String password) {
+        byte[] hash = mDigest.digest(password.getBytes(StandardCharsets.UTF_8));
+        byte[] fileContent = new byte[0];
+        try {
+            fileContent = Files.readAllBytes(Paths.get(getDir().getAbsolutePath() + "/.pass"));
+        } catch (IOException e) {
+            e.printStackTrace();
+            return false;
+        }
+        if (Arrays.equals(fileContent, hash))
+            return true;
+
+        return false;
+    }
+
+    public boolean isPasswortSet() {
+        byte[] fileContent = new byte[0];
+        try {
+            fileContent = Files.readAllBytes(Paths.get(getDir().getAbsolutePath() + "/.pass"));
+        } catch (IOException e) {
+            return false;
+        }
+
+        return true;
+    }
+
     private final IBinder mService = new IChildModeService.Stub() {
         @Override
         public void activate(boolean enable) {
@@ -77,5 +180,20 @@ public class ChildModeService extends LineageSystemService {
         public boolean isActivate() {
             return ChildModeService.this.isActivate();
         }
+
+        @Override
+        public boolean setPassword(String password) {
+            return ChildModeService.this.setPassword(password);
+        }
+
+        @Override
+        public boolean validatePassword(String password) {
+            return ChildModeService.this.validatePassword(password);
+        }
+
+        @Override
+        public boolean isPasswortSet() {
+            return ChildModeService.this.isPasswortSet();
+        }
     };
 }
diff --git a/sdk/src/java/lineageos/childmode/ChildModeManager.java b/sdk/src/java/lineageos/childmode/ChildModeManager.java
index c82b3bd6..63f80f06 100644
--- a/sdk/src/java/lineageos/childmode/ChildModeManager.java
+++ b/sdk/src/java/lineageos/childmode/ChildModeManager.java
@@ -88,4 +88,28 @@ public class ChildModeManager {
             throw e.rethrowFromSystemServer();
         }
     }
+
+    public boolean setPassword(String password) {
+        try {
+            return sService.setPassword(password);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    public boolean validatePassword(String password) {
+        try {
+            return sService.validatePassword(password);
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
+
+    public boolean isPasswortSet() {
+        try {
+            return sService.isPasswortSet();
+        } catch (RemoteException e) {
+            throw e.rethrowFromSystemServer();
+        }
+    }
 }
diff --git a/sdk/src/java/lineageos/childmode/IChildModeService.aidl b/sdk/src/java/lineageos/childmode/IChildModeService.aidl
index ecae4484..9f81df68 100644
--- a/sdk/src/java/lineageos/childmode/IChildModeService.aidl
+++ b/sdk/src/java/lineageos/childmode/IChildModeService.aidl
@@ -22,4 +22,10 @@ interface IChildModeService {
     void activate(boolean enable);
 
     boolean isActivate();
+
+    boolean setPassword(String password);
+
+    boolean validatePassword(String password);
+
+    boolean isPasswortSet();
 }
-- 
2.29.2

