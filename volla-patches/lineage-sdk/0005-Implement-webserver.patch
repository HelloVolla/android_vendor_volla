From d688e40cff1609a89b8d3b097fda8e5b64478c83 Mon Sep 17 00:00:00 2001
From: Erfan Abdi <erfangplus@gmail.com>
Date: Sat, 26 Feb 2022 20:00:26 +0330
Subject: [PATCH] Implement webserver

Change-Id: I607251474bed8896b43032dd45bd186301f1d88f
---
 Android.bp                                    |  5 +-
 .../platform/internal/FirewallService.java    | 89 ++++++++++++++++++-
 2 files changed, 92 insertions(+), 2 deletions(-)

diff --git a/Android.bp b/Android.bp
index 01488d3c..d588fc50 100644
--- a/Android.bp
+++ b/Android.bp
@@ -94,7 +94,10 @@ java_library {
     name: "org.lineageos.platform",
     installable: true,
     sdk_version: "core_platform",
-    static_libs: lineage_sdk_LOCAL_STATIC_ANDROID_LIBRARIES + lineage_sdk_LOCAL_STATIC_JAVA_LIBRARIES,
+    static_libs:
+        lineage_sdk_LOCAL_STATIC_ANDROID_LIBRARIES +
+        lineage_sdk_LOCAL_STATIC_JAVA_LIBRARIES +
+        [ "org.nanohttpd" ],
 
     libs: [
         "framework",
diff --git a/lineage/lib/main/java/org/lineageos/platform/internal/FirewallService.java b/lineage/lib/main/java/org/lineageos/platform/internal/FirewallService.java
index 4dee74d8..336842a3 100644
--- a/lineage/lib/main/java/org/lineageos/platform/internal/FirewallService.java
+++ b/lineage/lib/main/java/org/lineageos/platform/internal/FirewallService.java
@@ -51,6 +51,13 @@ import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.security.KeyStore;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.UnrecoverableKeyException;
+import java.security.cert.CertificateException;
+import javax.net.ssl.KeyManagerFactory;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Paths;
@@ -73,6 +80,8 @@ import android.net.shared.PrivateDnsConfig;
 import com.android.server.connectivity.MockableSystemProperties;
 import com.android.server.connectivity.DnsManager;
 
+import fi.iki.elonen.NanoHTTPD;
+
 public class FirewallService extends LineageSystemService {
 
     private static final String TAG = "FirewallService";
@@ -90,6 +99,10 @@ public class FirewallService extends LineageSystemService {
     private AtomicFile mFile;
     private final FirewallHandler mHandler;
 
+    private HttpWebServer mHttpWebServer;
+    private HttpsWebServer mHttpsWebServer;
+    private boolean isWebServerEnabled;
+
     private final ArrayList<String> mDomainsList = new ArrayList<String>();
 
     public FirewallService(Context context) {
@@ -126,8 +139,10 @@ public class FirewallService extends LineageSystemService {
     public void onBootPhase(int phase) {
         if (phase == SystemService.PHASE_SYSTEM_SERVICES_READY) {
             if (DEBUG_FIREWALL) Slog.v(TAG, "onBootPhase PHASE_SYSTEM_SERVICES_READY");
-            if (isActivate())
+            if (isActivate()) {
                 SystemProperties.set("ctl.start", "volla.dnsmasq");
+                activateWebServer(true);
+            }
         }
     }
 
@@ -152,6 +167,26 @@ public class FirewallService extends LineageSystemService {
         }
     }
 
+    private void activateWebServer(boolean enable) {
+        if (!isWebServerEnabled && enable) {
+            try {
+                mHttpWebServer = new HttpWebServer();
+                mHttpWebServer.start();
+                mHttpsWebServer = new HttpsWebServer();
+                mHttpsWebServer.start();
+                isWebServerEnabled = true;
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        } else if (isWebServerEnabled && !enable) {
+            if (mHttpWebServer != null)
+                mHttpWebServer.stop();
+            if (mHttpsWebServer != null)
+                mHttpsWebServer.stop();
+            isWebServerEnabled = false;
+        }
+    }
+
     private void initLockedApps() {
         if (DEBUG_FIREWALL) Slog.v(TAG, "initLockedApps(" + mUserId + ")");
         mFile = new AtomicFile(getFile());
@@ -286,6 +321,7 @@ public class FirewallService extends LineageSystemService {
         } else {
             SystemProperties.set("ctl.stop", "volla.dnsmasq");
         }
+        activateWebServer(enable);
         ConnectivityManager connectivityManager = (ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
         IDnsResolver resolver = IDnsResolver.Stub
                 .asInterface(ServiceManager.getService("dnsresolver"));
@@ -349,6 +385,15 @@ public class FirewallService extends LineageSystemService {
         return mDomainsList.size();
     }
 
+    private String getBlockedPage() {
+        String msg = "<html><head>";
+        msg += "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">";
+        msg += "</head><body><h2 style=\"text-align:center;font-family:Roboto\">";
+        msg += "This domain is blocked by firewall";
+        msg += "</h2></body></html>\n";
+        return msg;
+    }
+
     private final IBinder mService = new IFirewallService.Stub() {
         @Override
         public void activate(boolean enable) {
@@ -423,4 +468,46 @@ public class FirewallService extends LineageSystemService {
             }
         }
     }
+
+    public class HttpWebServer extends NanoHTTPD {
+        public HttpWebServer() {
+            super(80);
+        }
+
+        @Override
+        public Response serve(IHTTPSession session) {
+            return newFixedLengthResponse(getBlockedPage());
+        }
+    }
+
+    public class HttpsWebServer extends NanoHTTPD {
+        public HttpsWebServer() {
+            super(443);
+            KeyStore keyStore = null;
+            try {
+                keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
+                File initialFile = new File("/system/etc/localhost.bks");
+                InputStream keyStoreStream = new FileInputStream(initialFile);
+                keyStore.load(keyStoreStream, "myKeyStorePass".toCharArray());
+                KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
+                keyManagerFactory.init(keyStore, "myKeyStorePass".toCharArray());
+                makeSecure(NanoHTTPD.makeSSLSocketFactory(keyStore, keyManagerFactory), null);
+            } catch (KeyStoreException e) {
+                e.printStackTrace();
+            } catch (UnrecoverableKeyException e) {
+                e.printStackTrace();
+            } catch (CertificateException e) {
+                e.printStackTrace();
+            } catch (IOException e) {
+                e.printStackTrace();
+            } catch (NoSuchAlgorithmException e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public Response serve(IHTTPSession session) {
+            return newFixedLengthResponse(getBlockedPage());
+        }
+    }
 }
-- 
2.29.2

